#define READING_DIPHOTON_TREE_cxx
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include "Riostream.h"
#include <iostream>
#include <sstream>
#include <string>
#include <vector>
#include <stdlib.h>
#include <cmath>
#include <fstream>

#include <TROOT.h>
#include <TChain.h>
#include <TCanvas.h>
#include <TH1F.h>
#include <TH2F.h>
#include <TString.h>

#include <iostream>
#include "Riostream.h"
#include <fstream>
#include <iomanip>
#include <vector>
#include <string>
#include <TEfficiency.h>

//#define Nhltpaths 442
//#define Maxselection 7


#include "READING_DIPHOTON_TREE.h"

bool table18(float eta,float R9,float HoE,float CovIEtaIEta,float EtCorrHcalIso, float  EtCorrTrkIso, float ChargedPfIso){
  eta=fabs(eta);
  if(R9<=0.9){
    if(EtCorrHcalIso<4&&EtCorrTrkIso<4&&ChargedPfIso<4){
      if(eta<1.442&&HoE<0.075&&CovIEtaIEta<0.014) return true;
      if((eta>1.566&&eta<2.5)&&HoE<0.075&&CovIEtaIEta<0.034) return true;
    }
  }
  if(R9>0.9){
    if(EtCorrHcalIso<50&&EtCorrTrkIso<50&&ChargedPfIso<4){
      if(eta<1.442&&HoE<0.082&&CovIEtaIEta<0.014) return true;
      if((eta>1.566&&eta<2.5)&&HoE<0.075&&CovIEtaIEta<0.034) return true;
    }
  }
  return false;
}

void READING_DIPHOTON_TREE::Loop()
{
//   In a ROOT session, you can do:
//      Root > .L READING_DIPHOTON_TREE.C
//      Root > READING_DIPHOTON_TREE t
//      Root > t.GetEntry(12); // Fill t data members with entry number 12
//      Root > t.Show();       // Show values of entry 12
//      Root > t.Show(16);     // Read and show values of entry 16
//      Root > t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;
   Long64_t nentries = fChain->GetEntriesFast();
   Long64_t nbytes = 0, nb = 0;

   //Declaration 



   TFile * theFileOut;
   TH1F * cutflow;
   TH1F * ptLead[9  ];
   TH1F * ptTrail[9  ];
   TH1F * ptLeadNorm[9  ];
   TH1F * ptTrailNorm[9  ];
   TH1F * massDiphotonhisto[9  ];
   TH1F * massHiggshisto[9  ];
   TH1F * higgsEta[9  ];
   TH1F * higgsPhi[9  ];
   TH1F * higgsP[9  ];
   TH1F * higgsPt[9  ];
   TH2F * phi1phi2[9  ];
   TH2F * eta1eta2[9  ];
   TH2F * pt1pt2[9  ];
   TH2F * pt1pt2Norm[9  ];
   TH2F * pt1pt2Zoom[9  ];
   TH2F * wide_pt1pt2[9  ];
   
   TH1F * diphoton_LeadR9[9  ];
   TH1F * diphoton_SubLeadR9[9  ];
   
   TH1F * diphoton_LeadHoE[9  ];	
   TH1F * diphoton_SubLeadHoE[9  ];	
   
   TH1F * diphoton_LeadTrkIso03[9  ];
   TH1F * diphoton_SubLeadTrkIso03[9  ];

   TH1F * diphoton_LeadHcalIso03[9  ];
   TH1F * diphoton_SubLeadHcalIso03[9  ];
   
   TH1F * diphoton_Leadpfiso02[9  ];
   TH1F * diphoton_SubLeadpfiso02[9  ];
   

   const Double_t bins[19]={5,10,15,20,25,30,35,40,45,50,55,60,65,70,75,80,90,100,110};
   bool cut[9  ];
   //string arrayHLTpathsNames[442  ];
   bool filled_hlt_names;
   int cut_index;
   //beginJobs
   filled_hlt_names=false;
   theFileOut = new TFile("-fileout-", "RECREATE");
   TString name;

   cutflow = new TH1F ("cutflow","cutflow",9  ,-0.5,8.5);

   for(cut_index=0;cut_index<9  ;cut_index++){//Loop over the different histograms
     name = Form("ptLead_%d",cut_index);      ptLead[cut_index]            = new TH1F (name,name,100,0.,120.);
     name = Form("ptTrail_%d",cut_index);     ptTrail[cut_index]           = new TH1F (name,name,100,0.,120.);
     name = Form("ptLeadNorm_%d",cut_index);  ptLeadNorm[cut_index]        = new TH1F (name,name,100,0.,1.);
     name = Form("ptTrailNorm_%d",cut_index); ptTrailNorm[cut_index]       = new TH1F (name,name,100,0.,1.);
     name = Form("massDiphoton_%d",cut_index);massDiphotonhisto[cut_index] = new TH1F (name,name,100,60.,180.);
     name = Form("massHiggs_%d",cut_index);   massHiggshisto[cut_index]    = new TH1F (name,name,100,60.,180.);
     name = Form("higgsEta_%d",cut_index);    higgsEta[cut_index]          = new TH1F (name,name,100,-5,5);
     name = Form("higgsPhi_%d",cut_index);    higgsPhi[cut_index]          = new TH1F (name,name,180,-3.15,3.15);
     name = Form("higgsP_%d",cut_index);      higgsP[cut_index]            = new TH1F (name,name,500,0,1200);
     name = Form("higgsPt_%d",cut_index);     higgsPt[cut_index]           = new TH1F (name,name,500,0,1200);
     name = Form("phi1phi2_%d",cut_index);    phi1phi2[cut_index]          = new TH2F (name,name,180,-3.15,3.15,180,-3.15,3.15);
     name = Form("eta1eta2_%d",cut_index);    eta1eta2[cut_index]          = new TH2F (name,name,100,-5,5,100,-5,5);
     name = Form("pt1pt2_%d",cut_index);      pt1pt2[cut_index]            = new TH2F (name,name,100,0.,110.,100,0.,110.);
     name = Form("pt1pt2Norm_%d",cut_index);  pt1pt2Norm[cut_index]        = new TH2F (name,name,100,0.,1.,100,0.,1.);
     name = Form("pt1pt2Zoom_%d",cut_index);  pt1pt2Zoom[cut_index]        = new TH2F (name,name,20,0.3,0.5,20,0.2,0.4);
     name = Form("wide_pt1pt2_%d",cut_index); wide_pt1pt2[cut_index]       = new TH2F (name,name,19-1,bins,19-1,bins);

     name = Form("diphoton_LeadR9_%d",cut_index); diphoton_LeadR9[cut_index]       = new TH1F (name,name,100,0.,1.);
     name = Form("diphoton_SubLeadR9_%d",cut_index); diphoton_SubLeadR9[cut_index]       = new TH1F (name,name,100,0.,1.);

     name = Form("diphoton_LeadHoE_%d",cut_index); diphoton_LeadHoE[cut_index]       = new TH1F (name,name,100,0.,0.01);
     name = Form("diphoton_SubLeadHoE_%d",cut_index); diphoton_SubLeadHoE[cut_index]       = new TH1F (name,name,100,0.,0.01);

     name = Form("diphoton_LeadTrkIso03_%d",cut_index); diphoton_LeadTrkIso03[cut_index]       = new TH1F (name,name,100,0.,0.01);
     name = Form("diphoton_SubLeadTrkIso03_%d",cut_index); diphoton_SubLeadTrkIso03[cut_index]       = new TH1F (name,name,100,0.,0.01);

     name = Form("diphoton_LeadHcalIso03_%d",cut_index); diphoton_LeadHcalIso03[cut_index]       = new TH1F (name,name,100,0.,0.01);
     name = Form("diphoton_SubLeadHcalIso03_%d",cut_index); diphoton_SubLeadHcalIso03[cut_index]       = new TH1F (name,name,100,0.,0.01);
     
     name = Form("diphoton_Leadpfiso02_%d",cut_index); diphoton_Leadpfiso02[cut_index]       = new TH1F (name,name,100,0.,0.01);
     name = Form("diphoton_SubLeadpfiso02_%d",cut_index); diphoton_SubLeadpfiso02[cut_index]       = new TH1F (name,name,100,0.,0.01);
   }
   
   //loop
   
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
     Long64_t ientry = LoadTree(jentry);
     if (ientry < 0) break;
     nb = fChain->GetEntry(jentry);   
     nbytes += nb;

     /*
     std::cout<<event_hlt_bit->at(1)<<" "<<event_hlt_bit->at(2)<<" "<<event_hlt_bit->at(3)<<" "<<Diphoton_Mass<<" "<<Diphoton_PT<<" "<<Diphoton_Eta<<" "<<Diphoton_Phi<<std::endl;
     
     std::cout<<"sizes: hlt_bit"<<event_hlt_bit->size()<<" names_hlt"<<event_hlt_path_names_HLT->size()<<std::endl;     
     
     
     if(filled_hlt_names==false){
       for(int k=0;k<event_hlt_path_names_HLT->size();k++){
	 std::cout<<"k="<<k<<" event_hlt_path_names_HLT->at(k)="<<event_hlt_path_names_HLT->at(k)<<std::endl;
       }
       filled_hlt_names=true;
     }
     
     if(std::find(event_hlt_bit->begin(), event_hlt_bit->end(), 194)!=event_hlt_bit->end()) std::cout<<"bit 194 was fired"<<std::endl;
     if(std::find(event_hlt_bit->begin(), event_hlt_bit->end(), 1)!=event_hlt_bit->end()) std::cout<<"bit 1 was fired"<<std::endl;
     */

     //std::cout<<"cut1 ";
     
     for(cut_index=0;cut_index<9  ;cut_index++){
       cut[cut_index]=false;
       //std::cout<<cut[cut_index]<<" ";
     }
     //std::cout<<std::endl;
     
     unsigned int bit=194; bool bit194=(std::find(event_hlt_bit->begin(), event_hlt_bit->end(),bit)!=event_hlt_bit->end());
     unsigned int bit=195; bool bit195=(std::find(event_hlt_bit->begin(), event_hlt_bit->end(),bit)!=event_hlt_bit->end());
     unsigned int bit=205; bool bit205=(std::find(event_hlt_bit->begin(), event_hlt_bit->end(),bit)!=event_hlt_bit->end());

     /*
       bit_194_HLT_Photon26_R9Id85_OR_CaloId10_Iso50_Photon18_R9Id85_OR_CaloId10_Iso50_Mass60_v5
       bit_195_HLT_Photon26_R9Id85_OR_CaloId10_Iso50_Photon18_R9Id85_OR_CaloId10_Iso50_Mass70_v1
       bit_205_HLT_Photon36_R9Id85_OR_CaloId10_Iso50_Photon22_R9Id85_OR_CaloId10_Iso50_v5                                                     
     */
     
     bool hlt_bit;
     if(event_RunID==206859){
       hlt_bit=(bit195||bit205);
     }else{
       hlt_bit=(bit194||bit195||bit205);
     }

     bool mva = (Diphoton_LeadMVAOutput>-0.2&&Diphoton_SubLeadMVAOutput>-0.2)&&(Diphoton_MVAOutput>-0.78);
     
     bool selection=
       !((fabs(Diphoton_LeadEta)>1.4442&&fabs(Diphoton_LeadEta)<1.5660)||(fabs(Diphoton_SubLeadEta)>1.4442&&fabs(Diphoton_SubLeadEta)<1.5660))
       &&//Demand that both photons are gen-matched with real ones by asking GenGaGaFlag>=2`
       (Diphoton_LeadIsGenMatched>0 && Diphoton_SubLeadIsGenMatched>0)
       &&//Demand that both photons pass the MIT Precut_index
       (Diphoton_LeadMITPre>0&&Diphoton_SubLeadMITPre>0)
       &&//MVA
       mva
       ;
     
     bool only205=false;
     
     bool ptcut_bit_dependent = false;
     if(bit195||bit194){//one of the {26,18} bits
       ptcut_bit_dependent = (Diphoton_LeadEt>30.&&Diphoton_SubLeadEt>20)||(Diphoton_LeadEt>25&&Diphoton_SubLeadEt>25);
     }else if(bit205){//only {36,22}
       ptcut_bit_dependent = (Diphoton_LeadEt>40.&&Diphoton_SubLeadEt>25)||(Diphoton_LeadEt>35&&Diphoton_SubLeadEt>35);
       only205=true;
     }
     
     if(!only205){
       ptcut_bit_dependent = (Diphoton_LeadEt>30.&&Diphoton_SubLeadEt>20)||(Diphoton_LeadEt>25&&Diphoton_SubLeadEt>25);
       cut[7]=selection&&ptcut_bit_dependent; //Study D Denominator
       cut[8]=cut[7]&hlt_bit; 		    //Study D Numerator  
     }
